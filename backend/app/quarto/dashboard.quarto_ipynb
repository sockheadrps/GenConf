{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Generator R2 Data Visualization\"\n",
        "format: dashboard\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "\n",
        "## Generator R2 Data Visualization\n",
        "\n",
        "This visualization shows pre-run and post-run data for Generator R2.\n",
        "\n",
        "\n",
        "Row {height=60%}\n"
      ],
      "id": "c38db60c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import plotly.graph_objects as go\n",
        "from ..db.db_manager import DatabaseManager\n",
        "\n",
        "\n",
        "def fetch_gen_data():\n",
        "    db_manager = DatabaseManager()\n",
        "    \n",
        "    data = db_manager.all_gen_data('december', completed_only=True)\n",
        "    return data\n",
        "\n",
        "\n",
        "def time_to_decimal(time_str):\n",
        "    hours, minutes = map(int, time_str.split(':'))\n",
        "    return hours + minutes / 60\n",
        "\n",
        "# Function to preprocess data\n",
        "def preprocess_data(data):\n",
        "    processed_data = {}\n",
        "    # Convert tuple to dict using column names from db_manager\n",
        "    data_dict = {\n",
        "        'fuel_level': data[0],\n",
        "        'battery_vdc': data[1], \n",
        "        'run_hours': data[2],\n",
        "        'coolant_temp': data[3],\n",
        "        'leaks': data[4],\n",
        "        'notes': data[5],\n",
        "        'last_updated': data[6]\n",
        "    }\n",
        "    \n",
        "    for key, value in data_dict.items():\n",
        "        if key == 'run_hours' and isinstance(value, str):\n",
        "            processed_data[key] = time_to_decimal(value)  # Convert \"HH:MM\" to decimal hours\n",
        "        elif key == 'coolant_temp' and isinstance(value, str):\n",
        "            processed_data[key] = float(value)  # Convert string to float\n",
        "        else:\n",
        "            processed_data[key] = value\n",
        "    return processed_data\n",
        "\n",
        "data = fetch_gen_data()\n",
        "# Process data for all generators\n",
        "gen_temps = {}\n",
        "for gen in data:\n",
        "    processed = preprocess_data(data[gen]['post'])\n",
        "    if 'coolant_temp' in processed:\n",
        "        gen_temps[gen] = processed['run_hours']\n",
        "\n",
        "# Sort generators by run hours\n",
        "sorted_gens = dict(sorted(gen_temps.items(), key=lambda x: x[1]))\n",
        "\n",
        "# Prepare data for plotting\n",
        "gens = list(sorted_gens.keys())\n",
        "hours = list(sorted_gens.values())\n",
        "\n",
        "# Create interactive bar plot with Plotly\n",
        "fig = go.Figure(data=[\n",
        "    go.Bar(\n",
        "        x=gens,\n",
        "        y=hours,\n",
        "        text=[f'{h:.1f} hrs' for h in hours],\n",
        "        textposition='auto',\n",
        "        hovertemplate='Generator: %{x}<br>Run Hours: %{y:.1f}<extra></extra>',\n",
        "        marker_color='rgb(55, 83, 109)'\n",
        "    )\n",
        "])\n",
        "\n",
        "# Update layout with better styling\n",
        "fig.update_layout(\n",
        "    title={\n",
        "        'text': 'Post-Run Run Hours Across All Generators',\n",
        "        'y':0.95,\n",
        "        'x':0.5,\n",
        "        'xanchor': 'center',\n",
        "        'yanchor': 'top',\n",
        "        'font': {'size': 24}\n",
        "    },\n",
        "    xaxis_title='Generator',\n",
        "    yaxis_title='Run Hours',\n",
        "    xaxis_tickangle=-45,\n",
        "    plot_bgcolor='white',\n",
        "    showlegend=False,\n",
        "    height=600,\n",
        "    margin=dict(t=100, l=70, r=40, b=80),\n",
        "    hoverlabel=dict(bgcolor=\"white\", font_size=14),\n",
        ")\n",
        "\n",
        "# Add grid lines\n",
        "fig.update_yaxes(\n",
        "    showgrid=True, \n",
        "    gridwidth=1, \n",
        "    gridcolor='lightgray'\n",
        ")\n",
        "\n",
        "# Show the interactive plot\n",
        "fig.show()\n"
      ],
      "id": "dfcb66db",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\16145\\Desktop\\code_24\\GenConf\\.venv\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}